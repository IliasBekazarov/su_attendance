from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponse
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib.auth import login, authenticate, logout as auth_logout
from django.contrib.auth.forms import UserCreationForm
from django.db.models import Q, Count
from django.contrib import messages
from django.contrib.auth.models import User
from django.utils.translation import gettext as _
from .models import UserProfile, Student, Teacher, Course, Group, Attendance, Notification, Subject, Schedule, LeaveRequest
from .forms import StudentRegistrationForm, NotificationForm, LeaveRequestForm, UserProfileForm, UserUpdateForm, PasswordChangeCustomForm
from reportlab.pdfgen import canvas
from openpyxl import Workbook
from datetime import datetime, date, timedelta
from dal import autocomplete
from django import forms
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json

# ============= NOTIFICATION HELPER FUNCTIONS =============

def create_notification(recipient, notification_type, title, message, sender=None, student=None, leave_request=None):
    """–ë–∏–ª–¥–∏—Ä–º–µ —Ç“Ø–∑“Ø“Ø “Ø—á“Ø–Ω helper —Ñ—É–Ω–∫—Ü–∏—è"""
    return Notification.objects.create(
        recipient=recipient,
        sender=sender,
        notification_type=notification_type,
        title=title,
        message=message,
        student=student,
        leave_request=leave_request
    )

def check_excessive_absences():
    """–ö”©–ø –∂–æ–ª—É –∫–µ–ª–±–µ–≥–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä “Ø—á“Ø–Ω –±–∏–ª–¥–∏—Ä–º–µ–ª–µ—Ä –∂”©–Ω”©—Ç“Ø“Ø"""
    from collections import defaultdict
    
    # –°–æ“£–∫—É 10 –∫“Ø–Ω–¥”© 3 –∂–æ–ª—É–¥–∞–Ω –∫”©–ø –∫–µ–ª–±–µ–≥–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä–¥–∏ —Ç–∞–ø—É—É
    last_10_days = date.today() - timedelta(days=10)
    
    student_absences = defaultdict(int)
    recent_absences = Attendance.objects.filter(
        date__gte=last_10_days,
        status='Absent'
    )
    
    for absence in recent_absences:
        student_absences[absence.student] += 1
    
    # 3—Ç–µ–Ω –∫”©–ø –∂–æ–∫ –±–æ–ª–≥–æ–Ω —Å—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä “Ø—á“Ø–Ω –±–∏–ª–¥–∏—Ä–º–µ
    for student, absence_count in student_absences.items():
        if absence_count >= 3:
            # –û—à–æ–ª —Å—Ç—É–¥–µ–Ω—Ç—Ç–∏–Ω –∞—Ç–∞-—ç–Ω–µ–ª–µ—Ä–∏–Ω–µ –±–∏–ª–¥–∏—Ä–º–µ –∂”©–Ω”©—Ç“Ø“Ø
            parent_profiles = student.parents.all()
            for parent_profile in parent_profiles:
                create_notification(
                    recipient=parent_profile.user,
                    notification_type='ABSENCE',
                    title=f'‚ö†Ô∏è {student.name} –∫”©–ø –∂–æ–ª—É –∫–µ–ª–±–µ–¥–∏',
                    message=f'–°–∏–∑–¥–∏–Ω –±–∞–ª–∞“£—ã–∑ {student.name} —Å–æ“£–∫—É 10 –∫“Ø–Ω –∏—á–∏–Ω–¥–µ {absence_count} –∂–æ–ª—É —Å–∞–±–∞–∫—Ç–∞–Ω –∫–µ–ª–≥–µ–Ω –∂–æ–∫. –ê–Ω—ã–Ω —Å–µ–±–µ–±–∏–Ω –∞–Ω—ã–∫—Ç–∞–ø, –∑–∞—Ä—ã–ª —á–∞—Ä–∞–ª–∞—Ä–¥—ã –∫”©—Ä“Ø“Ø–≥”© ”©—Ç“Ø–Ω”©–±“Ø–∑.',
                    student=student
                )
            
            # –ö–ª–∞—Å—Å –∂–µ—Ç–µ–∫—á–∏—Å–∏–Ω–µ –¥–∞ –±–∏–ª–¥–∏—Ä–º–µ
            if student.group:
                # –°—Ç—É–¥–µ–Ω—Ç—Ç–∏–Ω –≥—Ä—É–ø–ø–∞—Å—ã –º–µ–Ω–µ–Ω –∏—à—Ç–µ–≥–µ–Ω –º—É–≥–∞–ª–∏–º–¥–µ—Ä–¥–∏ —Ç–∞–ø—É—É
                group_teachers = Teacher.objects.filter(
                    subject__schedule__group=student.group
                ).distinct()
                
                for teacher in group_teachers:
                    if teacher.user:
                        create_notification(
                            recipient=teacher.user,
                            notification_type='ABSENCE',
                            title=f'‚ö†Ô∏è {student.name} –∫”©–ø –∂–æ–ª—É –∫–µ–ª–±–µ–¥–∏',
                            message=f'–°—Ç—É–¥–µ–Ω—Ç {student.name} ({student.group.name}) —Å–æ“£–∫—É 10 –∫“Ø–Ω –∏—á–∏–Ω–¥–µ {absence_count} –∂–æ–ª—É —Å–∞–±–∞–∫—Ç–∞–Ω –∫–µ–ª–≥–µ–Ω –∂–æ–∫.',
                            student=student
                        )

def send_leave_request_notification(leave_request):
    """–ë–æ—à–æ—Ç—É—É —Å—É—Ä–∞–º—ã –∂”©–Ω”©—Ç“Ø–ª–≥”©–Ω–¥”© –±–∏–ª–¥–∏—Ä–º–µ"""
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–ª–æ—Ä–≥–æ –∂–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–ª–µ—Ä–≥–µ –±–∏–ª–¥–∏—Ä–º–µ
    admins_and_managers = User.objects.filter(
        userprofile__role__in=['ADMIN', 'MANAGER']
    )
    
    for admin in admins_and_managers:
        create_notification(
            recipient=admin,
            notification_type='LEAVE_REQUEST',
            title=f'üìù –ñ–∞“£—ã –±–æ—à–æ—Ç—É—É —Å—É—Ä–∞–º—ã - {leave_request.student.name}',
            message=f'–°—Ç—É–¥–µ–Ω—Ç {leave_request.student.name} ({leave_request.student.group.name}) {leave_request.start_date} - {leave_request.end_date} –º”©”©–Ω”©—Ç“Ø–Ω–¥”© {leave_request.get_leave_type_display()} —Å–µ–±–µ–±–∏–Ω–µ–Ω –±–æ—à–æ—Ç—É—É —Å—É—Ä–∞–ø –∂–∞—Ç–∞—Ç.\n\n–°–µ–±–µ–±–∏: {leave_request.reason}',
            sender=leave_request.student.user,
            student=leave_request.student,
            leave_request=leave_request
        )

def send_leave_decision_notification(leave_request, approved_by):
    """–ë–æ—à–æ—Ç—É—É —Å—É—Ä–∞–º—ã –±–æ—é–Ω—á–∞ —á–µ—á–∏–º –∫–∞–±—ã–ª –∞–ª—ã–Ω–≥–∞–Ω–¥–∞–Ω –∫–∏–π–∏–Ω –±–∏–ª–¥–∏—Ä–º–µ"""
    status_text = '–±–µ–∫–∏—Ç–∏–ª–¥–∏' if leave_request.status == 'APPROVED' else '—á–µ—Ç–∫–µ –∫–∞–≥—ã–ª–¥—ã'
    emoji = '‚úÖ' if leave_request.status == 'APPROVED' else '‚ùå'
    
    # –°—Ç—É–¥–µ–Ω—Ç–∫–µ –±–∏–ª–¥–∏—Ä–º–µ
    create_notification(
        recipient=leave_request.student.user,
        notification_type='LEAVE_APPROVED' if leave_request.status == 'APPROVED' else 'LEAVE_REJECTED',
        title=f'{emoji} –ë–æ—à–æ—Ç—É—É —Å—É—Ä–∞–º—ã“£—ã–∑ {status_text}',
        message=f'–°–∏–∑–¥–∏–Ω {leave_request.start_date} - {leave_request.end_date} –º”©”©–Ω”©—Ç“Ø–Ω–¥”©–≥“Ø –±–æ—à–æ—Ç—É—É —Å—É—Ä–∞–º—ã“£—ã–∑ {status_text}.\n\n–ß–µ—á–∏–º –∫–∞–±—ã–ª –∞–ª–≥–∞–Ω: {approved_by.get_full_name() or approved_by.username}',
        sender=approved_by,
        student=leave_request.student,
        leave_request=leave_request
    )
    
    # –ê—Ç–∞-—ç–Ω–µ–ª–µ—Ä–≥–µ –¥–∞ –±–∏–ª–¥–∏—Ä–º–µ
    parent_profiles = leave_request.student.parents.all()
    for parent_profile in parent_profiles:
        create_notification(
            recipient=parent_profile.user,
            notification_type='LEAVE_APPROVED' if leave_request.status == 'APPROVED' else 'LEAVE_REJECTED',
            title=f'{emoji} {leave_request.student.name}–¥—ã–Ω –±–æ—à–æ—Ç—É—É —Å—É—Ä–∞–º—ã {status_text}',
            message=f'–ë–∞–ª–∞“£—ã–∑–¥—ã–Ω {leave_request.start_date} - {leave_request.end_date} –º”©”©–Ω”©—Ç“Ø–Ω–¥”©–≥“Ø –±–æ—à–æ—Ç—É—É —Å—É—Ä–∞–º—ã {status_text}.\n\n–ß–µ—á–∏–º –∫–∞–±—ã–ª –∞–ª–≥–∞–Ω: {approved_by.get_full_name() or approved_by.username}',
            sender=approved_by,
            student=leave_request.student,
            leave_request=leave_request
        )

@login_required
def mark_schedule_attendance(request, group_id, period):
    if request.user.userprofile.role != 'TEACHER':
        return JsonResponse({'error': '–ë—É–ª —Ñ—É–Ω–∫—Ü–∏—è –º—É–≥–∞–ª–∏–º–¥–µ—Ä “Ø—á“Ø–Ω –≥–∞–Ω–∞.'}, status=403)
    
    group = get_object_or_404(Group, id=group_id)
    students = Student.objects.filter(group=group)
    today = date.today()
    
    data = {
        'group_name': group.name,
        'students': [
            {
                'id': student.id,
                'name': student.name,
                'attendance': Attendance.objects.filter(
                    student=student, schedule__group=group, schedule__day=today.weekday(), date=today
                ).exists()
            } for student in students
        ]
    }
    return JsonResponse(data)

@csrf_exempt
@login_required
def submit_schedule_attendance(request):
    if request.user.userprofile.role != 'TEACHER':
        return JsonResponse({'error': '–ë—É–ª —Ñ—É–Ω–∫—Ü–∏—è –º—É–≥–∞–ª–∏–º–¥–µ—Ä “Ø—á“Ø–Ω –≥–∞–Ω–∞.'}, status=403)
    
    if request.method == 'POST':
        for key, value in request.POST.items():
            if key.startswith('status_'):
                student_id = key.replace('status_', '')
                student = get_object_or_404(Student, id=student_id)
                schedule_id = request.POST.get('schedule_id')
                schedule = get_object_or_404(Schedule, id=schedule_id)
                Attendance.objects.update_or_create(
                    student=student,
                    schedule=schedule,
                    date=date.today(),
                    defaults={'status': value or 'Absent', 'created_by': request.user}
                )
            elif key.startswith('late_'):
                student_id = key.replace('late_', '')
                student = get_object_or_404(Student, id=student_id)
                schedule_id = request.POST.get('schedule_id')
                schedule = get_object_or_404(Schedule, id=schedule_id)
                if value:
                    Attendance.objects.update_or_create(
                        student=student,
                        schedule=schedule,
                        date=date.today(),
                        defaults={'status': value, 'created_by': request.user}
                    )
        return JsonResponse({'success': True})
    return JsonResponse({'error': 'Invalid request'}, status=400)
# –§–æ—Ä–º–∞
class NotificationForm(forms.ModelForm):
    student = forms.ModelChoiceField(queryset=Student.objects.all(), label='–°—Ç—É–¥–µ–Ω—Ç')
    message = forms.CharField(widget=forms.Textarea, label='–ë–∏–ª–¥–∏—Ä“Ø“Ø')

    class Meta:
        model = Notification
        fields = ['student', 'message']

# Autocomplete
class UserProfileAutocomplete(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        if not self.request.user.is_authenticated:
            return UserProfile.objects.none()
        qs = UserProfile.objects.filter(role='PARENT')
        if self.q:
            qs = qs.filter(user__username__istartswith=self.q)
        return qs

# –†–æ–ª–¥–æ—Ä–¥—É —Ç–µ–∫—à–µ—Ä“Ø“Ø
def is_admin_or_manager(user):
    try:
        return user.userprofile.role in ['ADMIN', 'MANAGER']
    except:
        return False

def is_teacher(user):
    try:
        return user.userprofile.role == 'TEACHER'
    except:
        return False

# View'–¥–æ—Ä
def home(request):
    if request.user.is_authenticated:
        return redirect('dashboard')
    return redirect('login')

@csrf_exempt
def register(request):
    if request.method == 'POST':
        form = StudentRegistrationForm(request.POST)
        if form.is_valid():
            user = form.save()
            UserProfile.objects.create(user=user, role='STUDENT')
            student = Student.objects.create(
                user=user,
                name=form.cleaned_data['name'],
                course=form.cleaned_data['course'],
                group=form.cleaned_data['group']
            )
            parent_username = form.cleaned_data.get('parent_username')
            if parent_username:
                parent = User.objects.get(username=parent_username)
                student.parents.add(parent.userprofile)
                parent.userprofile.students.add(student)
                messages.success(request, _('Parent linked successfully!'))
            messages.success(request, _('Student registered successfully!'))
            login(request, user)
            return redirect('dashboard')
        else:
            for error in form.errors.values():
                messages.error(request, error)
    else:
        form = StudentRegistrationForm()
    return render(request, 'registration.html', {'form': form})

from django.views.decorators.csrf import csrf_exempt
import json

@csrf_exempt
def user_login(request):
    if request.method == 'POST':
        # CSRF debug –º–∞–∞–ª—ã–º–∞—Ç—ã
        print(f"POST request from user: {request.user}")
        print(f"CSRF cookie: {request.META.get('CSRF_COOKIE')}")
        print(f"POST CSRF token: {request.POST.get('csrfmiddlewaretoken')}")
        
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('dashboard')
        else:
            messages.error(request, _('Login error!'))
    return render(request, 'login.html')

def user_logout(request):
    auth_logout(request)
    messages.success(request, _('You have been logged out!'))
    return redirect('login')

@login_required
def settings(request):
    """
    User settings –±–µ—Ç–∏ - —Ç–∏–ª –∂–∞–Ω–∞ —Ç–µ–º–∞ —Ç–∞–Ω–¥–æ–æ
    """
    from django.conf import settings as django_settings
    
    if request.method == 'POST':
        # –¢–∏–ª–¥–∏ ”©–∑–≥”©—Ä—Ç“Ø“Ø
        if 'language' in request.POST:
            language = request.POST.get('language')
            if language in [lang[0] for lang in django_settings.LANGUAGES]:
                from django.utils import translation
                translation.activate(language)
                request.session['django_language'] = language
                messages.success(request, _('Language updated successfully!'))
        
        # –¢–µ–º–∞–Ω—ã ”©–∑–≥”©—Ä—Ç“Ø“Ø (JavaScript –∞—Ä–∫—ã–ª—É—É –∏—à—Ç–µ–π—Ç)
        if 'theme' in request.POST:
            theme = request.POST.get('theme')
            if theme in ['light', 'dark']:
                messages.success(request, _('Theme preference saved!'))
        
        # –ë–∞—à–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–ª–∞—Ä
        if 'notifications' in request.POST:
            notifications_enabled = request.POST.get('notifications') == 'on'
            # Notifications –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–ª–∞—Ä—ã–Ω —Å–∞–∫—Ç–æ–æ –ª–æ–≥–∏–∫–∞—Å—ã–Ω –±—É–ª –∂–µ—Ä–≥–µ –∫–æ—à—Å–æ –±–æ–ª–æ—Ç
            messages.success(request, _('Notification settings updated!'))
        
        return redirect('settings')
    
    # –ñ–µ—Ç–∫–∏–ª–∏–∫—Ç“Ø“Ø —Ç–∏–ª–¥–µ—Ä
    available_languages = getattr(django_settings, 'LANGUAGES', [])
    current_language = request.session.get('django_language', django_settings.LANGUAGE_CODE)
    
    context = {
        'available_languages': available_languages,
        'current_language': current_language,
        'user': request.user,
        'user_profile': getattr(request.user, 'userprofile', None),
    }
    
    return render(request, 'settings.html', context)

@login_required
@login_required
def dashboard(request):
    from django.utils import timezone
    from datetime import datetime, timedelta
    
    print(f"Dashboard view called for user: {request.user}")
    
    try:
        profile, created = UserProfile.objects.get_or_create(user=request.user, defaults={'role': 'STUDENT'})
        if created:
            messages.info(request, _('Your profile has been automatically created (STUDENT role).'))
        role = profile.role
        print(f"User role: {role}")
    except Exception as e:
        print(f"Error getting user profile: {e}")
        return HttpResponse(f"Error: {e}", status=500)
    
    # –ë“Ø–≥“Ø–Ω–∫“Ø –¥–∞—Ç–∞
    today = timezone.now().date()
    today_weekday_num = today.weekday()  # 0=Monday, 6=Sunday
    
    # –ö“Ø–Ω–¥”©—Ä–¥“Ø Django Schedule –º–æ–¥–µ–ª–∏–Ω–∏–Ω —Ñ–æ—Ä–º–∞—Ç—ã–Ω–∞ –∞–ª–º–∞—à—Ç—ã—Ä—É—É
    weekday_map = {
        0: 'MONDAY',
        1: 'TUESDAY', 
        2: 'WEDNESDAY',
        3: 'THURSDAY',
        4: 'FRIDAY',
        5: 'SATURDAY',
        6: 'SUNDAY'
    }
    today_weekday = weekday_map.get(today_weekday_num, 'MONDAY')
    
    context = {
        'role': role, 
        'today': today,
        'user': request.user
    }
    
    start_date = request.GET.get('start_date')
    end_date = request.GET.get('end_date')

    if role in ['ADMIN', 'MANAGER']:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä—ã
        total_students = Student.objects.count()
        total_teachers = Teacher.objects.count()
        total_groups = Group.objects.count()
        total_subjects = Subject.objects.count()
        
        # –°–æ“£–∫—É –∏—à-–∞—Ä–∞–∫–µ—Ç—Ç–µ—Ä
        recent_activities = []
        
        context.update({
            'total_students': total_students,
            'total_teachers': total_teachers,
            'total_groups': total_groups,
            'total_subjects': total_subjects,
            'recent_activities': recent_activities,
        })
        
    elif role == 'TEACHER':
        # –ú—É–≥–∞–ª–∏–º –ø—Ä–æ—Ñ–∏–ª–∏–Ω –∞–ª—É—É
        try:
            teacher = Teacher.objects.get(user=request.user)
            context['teacher_obj'] = teacher
            
            # –ú—É–≥–∞–ª–∏–º–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç—Ç–µ—Ä–∏
            my_subjects = Subject.objects.filter(teacher=teacher)
            my_subjects_count = my_subjects.count()
            
            # –ú—É–≥–∞–ª–∏–º–¥–∏–Ω —Å—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä–∏ (–≥—Ä—É–ø–ø–∞–ª–∞—Ä –∞—Ä–∫—ã–ª—É—É)
            my_groups = Group.objects.filter(schedule__subject__teacher=teacher).distinct()
            my_students = Student.objects.filter(group__in=my_groups)
            my_students_count = my_students.count()
            
            # –ë“Ø–≥“Ø–Ω–∫“Ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            today_schedule = Schedule.objects.filter(
                subject__teacher=teacher,
                day=today_weekday
            ).order_by('time_slot__order')
            
            today_classes_count = today_schedule.count()
            
            context.update({
                'my_subjects_count': my_subjects_count,
                'my_students_count': my_students_count,
                'today_classes_count': today_classes_count,
                'today_schedule': today_schedule,
            })
            
        except Teacher.DoesNotExist:
            messages.error(request, _('Teacher profile not found. Please contact administrator.'))
            
    elif role == 'STUDENT':
        # –°—Ç—É–¥–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª–∏–Ω –∞–ª—É—É –∂–µ —Ç“Ø–∑“Ø“Ø
        student, created = Student.objects.get_or_create(
            user=request.user,
            defaults={
                'name': request.user.get_full_name() or request.user.username,
                'course': Course.objects.first(),
                'group': Group.objects.first()
            }
        )
        
        if created and not Course.objects.exists():
            Course.objects.create(name='1-–∫—É—Ä—Å', year=2024)
        if created and not Group.objects.exists():
            course = Course.objects.first()
            Group.objects.create(name='–ê-–≥—Ä—É–ø–ø–∞', course=course)
            
        context['student_obj'] = student
        
        # –ö–∞—Ç—ã—à—É—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å—ã
        attendance = Attendance.objects.filter(student=student)
        if start_date:
            attendance = attendance.filter(date__gte=start_date)
        if end_date:
            attendance = attendance.filter(date__lte=end_date)
            
        total_attendance = attendance.count()
        present_days = attendance.filter(status='Present').count()
        absent_days = attendance.filter(status='Absent').count()
        excused_days = attendance.filter(status='Excused').count()
        
        attendance_percentage = (present_days / total_attendance * 100) if total_attendance > 0 else 0
        
        # –ë“Ø–≥“Ø–Ω–∫“Ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        student_today_schedule = []
        if student.group:
            student_today_schedule = Schedule.objects.filter(
                group=student.group,
                day=today_weekday
            ).order_by('time_slot__order')
            
            # –ê—Ä –±–∏—Ä —Å–∞–±–∞–∫ “Ø—á“Ø–Ω –∫–∞—Ç—ã—à—É—É —Å—Ç–∞—Ç—É—Å—É–Ω –∞–ª—É—É
            for schedule in student_today_schedule:
                try:
                    attendance_record = Attendance.objects.get(
                        student=student,
                        date=today,
                        subject=schedule.subject
                    )
                    schedule.attendance_status = attendance_record.status
                except Attendance.DoesNotExist:
                    schedule.attendance_status = None
        
        context.update({
            'attendance_percentage': round(attendance_percentage, 1),
            'present_days': present_days,
            'absent_days': absent_days,
            'excused_days': excused_days,
            'student_today_schedule': student_today_schedule,
            'start_date': start_date,
            'end_date': end_date
        })
        
    elif role == 'PARENT':
        # –ê—Ç–∞-—ç–Ω–µ–ª–µ—Ä–¥–∏–Ω –±–∞–ª–¥–∞—Ä—ã
        my_children = profile.students.all()
        
        if my_children:
            # –ê—Ä –±–∏—Ä –±–∞–ª–∞ “Ø—á“Ø–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            for child in my_children:
                attendance = Attendance.objects.filter(student=child)
                if start_date:
                    attendance = attendance.filter(date__gte=start_date)
                if end_date:
                    attendance = attendance.filter(date__lte=end_date)
                    
                total_attendance = attendance.count()
                present_count = attendance.filter(status='Present').count()
                absent_count = attendance.filter(status='Absent').count()
                
                child.present_count = present_count
                child.absent_count = absent_count
                child.attendance_percentage = (present_count / total_attendance * 100) if total_attendance > 0 else 0
            
            # –ê—Ç–∞-—ç–Ω–µ–ª–µ—Ä “Ø—á“Ø–Ω –±–∏–ª–¥–∏—Ä“Ø“Ø–ª”©—Ä
            parent_notifications = Notification.objects.filter(
                recipient=request.user,
                notification_type__in=['ABSENCE', 'LEAVE_REQUEST', 'GENERAL']
            ).order_by('-created_at')[:10]
            
            context.update({
                'my_children': my_children,
                'parent_notifications': parent_notifications,
                'start_date': start_date,
                'end_date': end_date
            })
        else:
            messages.error(request, _('Your child profile is not linked. Please contact administrator.'))
            context.update({'message': '–ë–∞–ª–∞–Ω—ã–Ω –º–∞–∞–ª—ã–º–∞—Ç—ã –∂–æ–∫'})

    print(f"Dashboard context keys: {list(context.keys())}")
    print(f"Rendering dashboard.html template")
    
    # Context –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä—ã–Ω —Ç–æ–ª—É–∫ —á—ã–≥–∞—Ä–∞–ª—ã  
    print(f"Student object: {context.get('student_obj')}")
    if 'student_obj' in context and context['student_obj']:
        student = context['student_obj']
        print(f"Student details: name={student.name}, group={student.group}")
        if hasattr(student, 'group') and student.group:
            print(f"Group details: {student.group.name}")
    
    try:
        response = render(request, 'dashboard.html', context)
        print(f"Template rendered successfully, content length: {len(response.content)}")
        return response
    except Exception as e:
        print(f"Template rendering error: {e}")
        import traceback
        print(f"Full traceback: {traceback.format_exc()}")
        return HttpResponse(f"Template error: {e}", status=500)

@login_required
def send_notification(request):
    if request.user.userprofile.role != 'TEACHER':
        messages.error(request, _('This function is for teachers only.'))
        return redirect('dashboard')
    
    teacher = Teacher.objects.get(user=request.user)
    if request.method == 'POST':
        form = NotificationForm(request.POST)
        if form.is_valid():
            notification = form.save(commit=False)
            notification.teacher = teacher
            notification.save()
            messages.success(request, _('Notification sent!'))
            return redirect('dashboard')
    else:
        form = NotificationForm()
    return render(request, 'send_notification.html', {'form': form})

@login_required
def mark_notification_read(request, notification_id):
    if request.user.userprofile.role != 'PARENT':
        messages.error(request, _('This function is for parents only.'))
        return redirect('dashboard')
    notification = Notification.objects.get(id=notification_id)
    if notification.student in request.user.userprofile.students.all():
        notification.is_read = True
        notification.save()
        messages.success(request, _('Notification marked as read.'))
    return redirect('dashboard')

from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.shortcuts import render, redirect, get_object_or_404
from .models import Schedule, Subject, Group
from .forms import ScheduleEditForm  # –§–æ—Ä–º–∞ —Ñ–∞–π–ª—ã–Ω –∏–º–ø–æ—Ä—Ç—Ç–æ–æ

from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.shortcuts import render, redirect
from .models import Schedule, Subject, Group
from .forms import ScheduleEditForm  # –ñ–∞“£—ã –∫–æ—à—É–ª–≥–∞–Ω

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from .models import Course, Group, Schedule, Teacher, Attendance, Student, Subject
from datetime import date
import json

@login_required
@login_required
def schedule_edit(request):
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫”©—Ä“Ø“Ø (–ú–µ–Ω–µ–¥–∂–µ—Ä/–ê–¥–º–∏–Ω “Ø—á“Ø–Ω - –∂”©–Ω –≥–∞–Ω–∞ –∫”©—Ä“Ø“Ø —Ä–µ–∂–∏–º–∏)"""
    profile = UserProfile.objects.get(user=request.user)
    
    # –£—Ä—É–∫—Å–∞—Ç —Ç–µ–∫—à–µ—Ä“Ø“Ø - –∂”©–Ω –≥–∞–Ω–∞ –∫”©—Ä“Ø“Ø “Ø—á“Ø–Ω
    if profile.role not in ['MANAGER', 'ADMIN']:
        messages.error(request, _('This function is for managers and administrators only.'))
        return redirect('dashboard')

    schedules = Schedule.objects.all()  # –ë–∞—Ä–¥—ã–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–ª–µ—Ä
    courses = Course.objects.all()
    
    # –£–±–∞–∫—ã—Ç –ø–µ—Ä–∏–æ–¥–¥–æ—Ä—É (—Å—Ç–∞—Ç–∏–∫)
    periods = []
    times = [
        ('08:00', '09:30'),
        ('09:40', '11:10'), 
        ('11:30', '13:00'),
        ('14:00', '15:30'),
        ('15:40', '17:10')
    ]
    
    for i, (start, end) in enumerate(times, 1):
        from datetime import datetime
        start_time = datetime.strptime(start, '%H:%M').time()
        end_time = datetime.strptime(end, '%H:%M').time()
        periods.append({
            'period': i,
            'start_time': start_time,
            'end_time': end_time
        })

    # –ö”©—Ä“Ø“Ø —Ä–µ–∂–∏–º–∏–Ω–¥–µ POST ”©–Ω–¥”©—à“Ø“Ø –∂–æ–∫ - –∂”©–Ω –≥–∞–Ω–∞ –º–∞–∞–ª—ã–º–∞—Ç –∫”©—Ä—Å”©—Ç“Ø“Ø
    context = {
        'courses': courses,
        'active_course': courses.first() if courses.exists() else None,
        'periods': periods,
        'schedules': schedules,
        'view_only': True,  # –ö”©—Ä“Ø“Ø —Ä–µ–∂–∏–º–∏ –±–µ–ª–≥–∏—Å–∏
    }
    return render(request, 'schedule_edit.html', context)

@login_required
def schedule_update(request):
    if request.method == 'POST' and request.user.userprofile.role == 'MANAGER':
        try:
            data = json.loads(request.body)
            group_id = data.get('group_id')
            period = data.get('period')
            content = data.get('content')

            # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ–Ω–∏ –∂–∞“£—ã–ª–æ–æ –ª–æ–≥–∏–∫–∞—Å—ã
            # –ú–∏—Å–∞–ª—ã, content'—Ç–∏ –±”©–ª“Ø–ø, subject, teacher –∂–∞–Ω–∞ room'–¥—É —Å–∞–∫—Ç–æ–æ
            lines = content.strip().split('\n')
            subject_name = lines[0] if lines else ''
            teacher_name = lines[1] if len(lines) > 1 else ''
            room = lines[2] if len(lines) > 2 else ''

            group = get_object_or_404(Group, id=group_id)
            subject = Subject.objects.filter(subject_name=subject_name).first()
            teacher = Teacher.objects.filter(name=teacher_name).first()

            Schedule.objects.update_or_create(
                group=group,
                period=period,
                defaults={
                    'subject': subject,
                    'teacher': teacher,
                    'room': room,
                    'start_time': '10:00',  # –£–±–∞–∫—ã—Ç—Ç—ã –º–æ–¥–µ–ª–¥–µ–Ω –∂–µ periods —Ç–∏–∑–º–µ—Å–∏–Ω–µ–Ω –∞–ª—Å–∞ –±–æ–ª–æ—Ç
                    'end_time': '11:20'
                }
            )
            return JsonResponse({'success': True})
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)})
    return JsonResponse({'success': False, 'error': 'Invalid request'})

@login_required
def student_schedule(request):
    """–°—Ç—É–¥–µ–Ω—Ç—Ç–∏–Ω –∂—É–º–∞–ª—ã–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ—Å–∏ –∂–∞–Ω–∞ –∫–∞—Ç—ã—à—É—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å—ã"""
    if request.user.userprofile.role != 'STUDENT':
        messages.error(request, _('This function is for students only.'))
        return redirect('dashboard')
    
    try:
        student = Student.objects.get(user=request.user)
        
        # –ñ—É–º–∞–ª—ã–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ “Ø—á“Ø–Ω –∫“Ø–Ω–¥”©—Ä
        days = [
            ('Monday', '–î“Ø–π—à”©–º–±“Ø'),
            ('Tuesday', '–®–µ–π—à–µ–º–±–∏'), 
            ('Wednesday', '–®–∞—Ä—à–µ–º–±–∏'),
            ('Thursday', '–ë–µ–π—à–µ–º–±–∏'),
            ('Friday', '–ñ—É–º–∞'),
            ('Saturday', '–ò—à–µ–º–±–∏'),
        ]
        
        # –°—Ç—É–¥–µ–Ω—Ç—Ç–∏–Ω –≥—Ä—É–ø–ø–∞—Å—ã–Ω—ã–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ—Å–∏
        schedules = Schedule.objects.filter(group=student.group).order_by('day', 'time_slot__order')
        
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü–∞—Å—ã–Ω —Ç“Ø–∑“Ø“Ø
        schedule_matrix = {}
        
        # –£—à—É–ª –∞–ø—Ç–∞–Ω—ã–Ω –±–∞—à—ã –∂–∞–Ω–∞ –∞—è–≥—ã (–î“Ø–π—à”©–º–±“Ø–¥”©–Ω –ñ–µ–∫—à–µ–º–±–∏–≥–µ)
        from datetime import date, timedelta
        today = date.today()
        # –î“Ø–π—à”©–º–±“Ø–Ω“Ø —Ç–∞–±—É—É (weekday: 0=–î“Ø–π—à”©–º–±“Ø, 6=–ñ–µ–∫—à–µ–º–±–∏)
        days_since_monday = today.weekday()
        start_date = today - timedelta(days=days_since_monday)
        end_date = start_date + timedelta(days=6)  # –ñ–µ–∫—à–µ–º–±–∏
        
        # TimeSlot'—Ç–æ—Ä–¥—É –∞–ª—É—É (–∞–¥–º–∏–Ω —Ç–∞—Ä–∞–±—ã–Ω–∞–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–ª–∞–Ω–≥–∞–Ω)
        from core.models import TimeSlot
        time_slots = TimeSlot.objects.filter(is_active=True).order_by('order')
        
        for day_code, day_name in days:
            schedule_matrix[day_code] = {}
            for time_slot in time_slots:
                # –ë—É–ª –∫“Ø–Ω –∂–∞–Ω–∞ —É–±–∞–∫—ã—Ç —Å–ª–æ—Ç—É “Ø—á“Ø–Ω —Å–∞–±–∞–∫—Ç—ã —Ç–∞–±—É—É
                day_schedule = schedules.filter(
                    day=day_code,
                    time_slot=time_slot
                ).first()
                
                schedule_info = None
                if day_schedule:
                    # –ë—É–ª —Å–∞–±–∞–∫ “Ø—á“Ø–Ω —É—à—É–ª –∞–ø—Ç–∞–Ω—ã–Ω —ç“£ —Å–æ“£–∫—É –∫–∞—Ç—ã—à—É—É —Å—Ç–∞—Ç—É—Å—É–Ω –∞–ª—É—É
                    last_attendance = Attendance.objects.filter(
                        student=student,
                        subject=day_schedule.subject,
                        date__range=[start_date, end_date]
                    ).order_by('-date').first()
                    
                    # –°–æ“£–∫—É —Å—Ç–∞—Ç—É—Å—Ç—É –∞–Ω—ã–∫—Ç–æ–æ
                    if last_attendance:
                        if last_attendance.status == 'Present':
                            last_status = '–ö–∞—Ç—ã—à–∫–∞–Ω'
                            status_class = 'success'
                        elif last_attendance.status == 'Absent':
                            last_status = '–ö–∞—Ç—ã—à–ø–∞–≥–∞–Ω'
                            status_class = 'danger'
                        elif last_attendance.status == 'Late':
                            last_status = '–ö–µ—á–∏–∫–∫–µ–Ω'
                            status_class = 'warning'
                        else:
                            last_status = '–ö–∞—Ç—ã—à–∫–∞–Ω'
                            status_class = 'success'
                    else:
                        last_status = '–ë–µ–ª–≥–∏–ª–µ–Ω–µ —ç–ª–µ–∫'
                        status_class = 'secondary'
                    
                    schedule_info = {
                        'schedule': day_schedule,
                        'last_status': last_status,
                        'status_class': status_class
                    }
                
                schedule_matrix[day_code][time_slot.name] = {
                    'time_range': f"{time_slot.start_time.strftime('%H:%M')} - {time_slot.end_time.strftime('%H:%M')}",
                    'schedule_info': schedule_info
                }
        
        # –ë“Ø–≥“Ø–Ω–∫“Ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ “Ø—á“Ø–Ω schedules –∞–ª—É—É
        today_schedules = Schedule.objects.filter(
            group=student.group,
            day=today.strftime('%A')  # Monday, Tuesday, etc.
        ).order_by('time_slot__order')
        
        context = {
            'student': student,
            'schedules': today_schedules,
            'days': days,
            'time_slots': list(time_slots),  # TimeSlot QuerySet'–∏–Ω list'–∫–µ –∞–π–ª–∞–Ω–¥—ã—Ä—É—É
            'schedule_matrix': schedule_matrix,
            'start_date': start_date,
            'end_date': end_date,
        }
        
        return render(request, 'modern_student_schedule.html', context)
        
    except Student.DoesNotExist:
        messages.error(request, _('Student information not found!'))
        return redirect('dashboard')

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from .models import Course, Group, Schedule, Teacher, Attendance, Student
from datetime import date

@login_required
def teacher_schedule(request):
    """–ú—É–≥–∞–ª–∏–º–¥–∏–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ—Å–∏–Ω –∫”©—Ä“Ø“Ø –∂–∞–Ω–∞ –∂–æ–∫—Ç–æ–æ –±–µ–ª–≥–∏–ª”©”©"""
    if request.user.userprofile.role != 'TEACHER':
        messages.error(request, _('This function is for teachers only.'))
        return redirect('dashboard')
    
    try:
        teacher = Teacher.objects.get(user=request.user)
    except Teacher.DoesNotExist:
        messages.error(request, _('You are not registered as a teacher.'))
        return redirect('dashboard')

    # –§–∏–ª—å—Ç—Ä–ª–µ—Ä
    day_filter = request.GET.get('day_filter', '')
    group_filter = request.GET.get('group_filter', '')
    subject_filter = request.GET.get('subject_filter', '')

    # –ú—É–≥–∞–ª–∏–º–¥–∏–Ω —Å–∞–±–∞–∫—Ç–∞—Ä—ã
    schedules = Schedule.objects.filter(
        subject__teacher=teacher
    ).select_related('subject', 'group', 'group__course').order_by('day', 'time_slot__order')
    
    # –ë“Ø–≥“Ø–Ω–∫“Ø —Å–∞–±–∞–∫—Ç–∞—Ä “Ø—á“Ø–Ω —Ñ–∏–ª—å—Ç—Ä
    today = date.today()
    today_schedules = schedules.filter(day=today.strftime('%A'))

    # –§–∏–ª—å—Ç—Ä–ª–µ—Ä–¥–∏ –∫–æ–ª–¥–æ–Ω—É—É
    if day_filter:
        today_schedules = today_schedules.filter(day=day_filter)
    if group_filter:
        today_schedules = today_schedules.filter(group_id=group_filter)
    if subject_filter:
        today_schedules = today_schedules.filter(subject_id=subject_filter)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ “Ø—á“Ø–Ω –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä
    total_lessons = schedules.count()
    available_groups = Group.objects.filter(schedule__subject__teacher=teacher).distinct()
    available_subjects = teacher.subjects.all()
    total_groups = available_groups.count()
    total_subjects = available_subjects.count()

    # –ö“Ø–Ω–¥”©—Ä —Ç–∏–∑–º–µ—Å–∏
    days = [
        ('Monday', '–î“Ø–π—à”©–º–±“Ø'),
        ('Tuesday', '–®–µ–π—à–µ–º–±–∏'), 
        ('Wednesday', '–®–∞—Ä—à–µ–º–±–∏'),
        ('Thursday', '–ë–µ–π—à–µ–º–±–∏'),
        ('Friday', '–ñ—É–º–∞'),
        ('Saturday', '–ò—à–µ–º–±–∏'),
    ]

    context = {
        'teacher': teacher,
        'schedules': today_schedules,
        'total_lessons': total_lessons,
        'total_groups': total_groups,
        'total_subjects': total_subjects,
        'available_groups': available_groups,
        'available_subjects': available_subjects,
        'days': days,
        'day_filter': day_filter,
        'group_filter': group_filter,
        'subject_filter': subject_filter,
    }
    return render(request, 'modern_teacher_schedule.html', context)

@login_required
def teacher_attendance(request):
    """–ú—É–≥–∞–ª–∏–º “Ø—á“Ø–Ω –∂–µ–∫–µ –∂–æ–∫—Ç–æ–æ —Å–∏—Å—Ç–µ–º–∞—Å—ã"""
    if request.user.userprofile.role != 'TEACHER':
        messages.error(request, _('This function is for teachers only.'))
        return redirect('dashboard')
    
    try:
        teacher = Teacher.objects.get(user=request.user)
    except Teacher.DoesNotExist:
        messages.error(request, _('You are not registered as a teacher.'))
        return redirect('dashboard')

    # POST request - –∂–æ–∫—Ç–æ–æ –±–µ–ª–≥–∏–ª”©”©
    if request.method == 'POST':
        schedule_id = request.POST.get('schedule_id')
        if schedule_id:
            schedule = get_object_or_404(Schedule, id=schedule_id, subject__teacher=teacher)
            
            saved_count = 0
            for key, value in request.POST.items():
                if key.startswith('status_') and value:
                    try:
                        student_id = key.replace('status_', '')
                        student = get_object_or_404(Student, id=student_id, group=schedule.group)
                        
                        # Attendance —Å–∞–∫—Ç–æ–æ
                        attendance, created = Attendance.objects.update_or_create(
                            student=student,
                            subject=schedule.subject,
                            schedule=schedule,
                            date=date.today(),
                            defaults={
                                'status': value, 
                                'created_by': request.user
                            }
                        )
                        saved_count += 1
                        
                    except (Student.DoesNotExist, ValueError):
                        continue
            
            if saved_count > 0:
                messages.success(request, _('Attendance marked for {} students.').format(saved_count))
            else:
                messages.warning(request, '–≠—á –∫–∞–Ω–¥–∞–π –º–∞–∞–ª—ã–º–∞—Ç —Å–∞–∫—Ç–∞–ª–≥–∞–Ω –∂–æ–∫.')
                
            return redirect('teacher_attendance')

    # GET request - –º—É–≥–∞–ª–∏–º–¥–∏–Ω —Å–∞–±–∞–∫—Ç–∞—Ä—ã–Ω –∫”©—Ä—Å”©—Ç“Ø“Ø
    schedules = Schedule.objects.filter(
        subject__teacher=teacher
    ).select_related(
        'subject', 'group', 'group__course'
    ).prefetch_related(
        'group__student_set'
    ).order_by('day', 'time_slot__order')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Å–µ–ø—Ç”©”©
    total_students = sum([schedule.group.student_set.count() for schedule in schedules])
    unique_groups = schedules.values('group').distinct().count()
    subjects = schedules.values('subject').distinct()

    context = {
        'teacher': teacher,
        'schedules': schedules,
        'total_students': total_students,
        'unique_groups': unique_groups,
        'subjects': subjects,
        'today': date.today(),
    }
    return render(request, 'teacher_attendance.html', context)
@login_required
def mark_attendance(request, subject_id):
    if request.user.userprofile.role not in ['TEACHER', 'ADMIN', 'MANAGER']:
        messages.error(request, _('This function is for teachers or administrators only.'))
        return redirect('dashboard')
    
    subject = get_object_or_404(Subject, id=subject_id)
    students = Student.objects.filter(group=subject.course.group_set.first())
    
    if request.method == 'POST':
        for student in students:
            status = request.POST.get(f'status_{student.id}')
            if status:
                Attendance.objects.create(
                    student=student,
                    subject=subject,
                    date=date.today(),
                    status=status,
                    created_by=request.user
                )
        messages.success(request, '–ö–∞—Ç—ã—à—É—É –±–µ–ª–≥–∏–ª–µ–Ω–¥–∏.')
        return redirect('schedule')  # –ë—É–ª –∂–µ—Ä–¥–µ –±–∞–≥—ã—Ç—Ç–æ–æ —Ç—É—É—Ä–∞ —ç–º–µ—Å, –∞–Ω—Ç–∫–µ–Ω–∏ 'schedule' –∂–æ–∫. 'dashboard' –∂–µ 'teacher_schedule' –∫–æ–ª–¥–æ–Ω—É“£—É–∑.
    
    context = {'subject': subject, 'students': students}
    return render(request, 'mark_attendance.html', context)

@login_required
def mark_group_attendance(request, schedule_id):
    if request.user.userprofile.role != 'TEACHER':
        messages.error(request, '–ë—É–ª —Ñ—É–Ω–∫—Ü–∏—è –º—É–≥–∞–ª–∏–º–¥–µ—Ä “Ø—á“Ø–Ω –≥–∞–Ω–∞.')
        return redirect('dashboard')
    
    schedule = get_object_or_404(Schedule, id=schedule_id)
    students = Student.objects.filter(group=schedule.group)
    
    if request.method == 'POST':
        for student in students:
            status = request.POST.get(f'status_{student.id}')
            if status:
                Attendance.objects.update_or_create(
                    student=student,
                    subject=schedule.subject,  # Subject –∫–æ—à—É—É
                    schedule=schedule,
                    date=date.today(),
                    defaults={'status': status, 'created_by': request.user}
                )
        messages.success(request, '–ö–∞—Ç—ã—à—É—É –±–µ–ª–≥–∏–ª–µ–Ω–¥–∏.')
        return redirect('teacher_schedule')
    
    context = {'schedule': schedule, 'students': students}
    return render(request, 'mark_group_attendance.html', context)

@login_required
@user_passes_test(is_admin_or_manager)
def report(request):
    from django.utils import timezone
    from datetime import datetime, timedelta
    import json
    
    # –î–∞—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∏
    start_date = request.GET.get('start_date')
    end_date = request.GET.get('end_date')
    report_type = request.GET.get('report_type', 'all')  # all, daily, weekly, monthly
    student_id = request.GET.get('student')
    group_id = request.GET.get('group')
    
    # –ë–∞–∑–∞–ª—ã–∫ attendance queryset
    attendances = Attendance.objects.all()
    
    # –î–∞—Ç–∞ –±–æ—é–Ω—á–∞ —Ñ–∏–ª—å—Ç—Ä
    if start_date:
        try:
            start_date = datetime.strptime(start_date, '%Y-%m-%d').date()
            attendances = attendances.filter(date__gte=start_date)
        except ValueError:
            start_date = None
    
    if end_date:
        try:
            end_date = datetime.strptime(end_date, '%Y-%m-%d').date()
            attendances = attendances.filter(date__lte=end_date)
        except ValueError:
            end_date = None
    
    # –°—Ç—É–¥–µ–Ω—Ç –±–æ—é–Ω—á–∞ —Ñ–∏–ª—å—Ç—Ä
    if student_id:
        try:
            attendances = attendances.filter(student_id=student_id)
        except:
            pass
    
    # –ì—Ä—É–ø–ø–∞ –±–æ—é–Ω—á–∞ —Ñ–∏–ª—å—Ç—Ä
    if group_id:
        try:
            attendances = attendances.filter(student__group_id=group_id)
        except:
            pass
    
    # –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    today = timezone.now().date()
    if report_type == 'daily':
        attendances = attendances.filter(date=today)
    elif report_type == 'weekly':
        week_start = today - timedelta(days=today.weekday())
        attendances = attendances.filter(date__gte=week_start, date__lte=today)
    elif report_type == 'monthly':
        month_start = today.replace(day=1)
        attendances = attendances.filter(date__gte=month_start, date__lte=today)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_records = attendances.count()
    present_count = attendances.filter(status='Present').count()
    absent_count = attendances.filter(status='Absent').count()
    late_count = attendances.filter(status='Late').count()
    excused_count = attendances.filter(status='Excused').count()
    
    attendance_percentage = (present_count / total_records * 100) if total_records > 0 else 0
    
    # –ì—Ä—É–ø–ø–∞ –±–æ—é–Ω—á–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    group_stats = []
    for group in Group.objects.all():
        group_attendances = attendances.filter(student__group=group)
        group_total = group_attendances.count()
        group_present = group_attendances.filter(status='Present').count()
        group_percentage = (group_present / group_total * 100) if group_total > 0 else 0
        
        group_stats.append({
            'group': group,
            'total': group_total,
            'present': group_present,
            'percentage': round(group_percentage, 1)
        })
    
    # –ö“Ø–Ω“Ø–º–¥“Ø–∫ —Ç—Ä–µ–Ω–¥ (—Å–æ“£–∫—É 7 –∫“Ø–Ω)
    daily_trend = []
    for i in range(7):
        check_date = today - timedelta(days=i)
        day_attendances = Attendance.objects.filter(date=check_date)
        day_total = day_attendances.count()
        day_present = day_attendances.filter(status='Present').count()
        day_percentage = (day_present / day_total * 100) if day_total > 0 else 0
        
        daily_trend.append({
            'date': check_date.strftime('%m-%d'),
            'percentage': round(day_percentage, 1),
            'total': day_total
        })
    
    daily_trend.reverse()  # –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è–ª—ã–∫ —Ç–∞—Ä—Ç–∏–ø—Ç–µ
    
    # –≠“£ –∫”©–ø –∂–æ–∫ –±–æ–ª–≥–æ–Ω —Å—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä
    from django.db.models import Count
    top_absent_students = Student.objects.annotate(
        absent_count=Count('attendance', filter=Q(attendance__status='Absent'))
    ).filter(absent_count__gt=0).order_by('-absent_count')[:10]
    
    # Export handling
    if request.method == 'POST':
        format_type = request.POST.get('format')
        if format_type == 'pdf':
            return export_detailed_pdf(attendances, {
                'report_type': report_type,
                'start_date': start_date,
                'end_date': end_date,
                'total_records': total_records,
                'present_count': present_count,
                'absent_count': absent_count,
                'late_count': late_count,
                'excused_count': excused_count,
                'attendance_percentage': attendance_percentage
            })
        elif format_type == 'excel':
            return export_detailed_excel(attendances)
    
    context = {
        'attendances': attendances.order_by('-date')[:100],  # Show latest 100
        'total_records': total_records,
        'present_count': present_count,
        'absent_count': absent_count, 
        'late_count': late_count,
        'excused_count': excused_count,
        'attendance_percentage': round(attendance_percentage, 1),
        'group_stats': group_stats,
        'daily_trend': json.dumps(daily_trend),
        'top_absent_students': top_absent_students,
        'students': Student.objects.all(),
        'groups': Group.objects.all(),
        'start_date': start_date,
        'end_date': end_date,
        'report_type': report_type,
        'student_id': student_id,
        'group_id': group_id,
    }
    
    return render(request, 'report.html', context)

def export_detailed_pdf(attendances, stats):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π PDF –æ—Ç—á–µ—Ç —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename="detailed_attendance_report.pdf"'
    
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.lib import colors
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.pdfbase import pdfutils
    from reportlab.lib.units import inch
    
    doc = SimpleDocTemplate(response, pagesize=A4)
    elements = []
    styles = getSampleStyleSheet()
    
    # Title
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=30,
        alignment=1  # Center
    )
    elements.append(Paragraph("–ö–∞—Ç—ã—à—É—É –°–∏—Å—Ç–µ–º–∞—Å—ã - –î–µ—Ç–∞–ª—å–Ω—ã–π –û—Ç—á–µ—Ç", title_style))
    elements.append(Spacer(1, 20))
    
    # Statistics Summary
    summary_data = [
        ['–ñ–∞–ª–ø—ã –∂–∞–∑—É—É–ª–∞—Ä:', stats['total_records']],
        ['–ö–∞—Ç—ã—à–∫–∞–Ω–¥–∞—Ä:', stats['present_count']],
        ['–ö–∞—Ç—ã—à–ø–∞–≥–∞–Ω–¥–∞—Ä:', stats['absent_count']], 
        ['–ö–µ—á–∏–∫–∫–µ–Ω–¥–µ—Ä:', stats['late_count']],
        ['–£—Ä—É–∫—Å–∞—Ç –º–µ–Ω–µ–Ω –∂–æ–∫—Ç–æ—Ä:', stats['excused_count']],
        ['–ö–∞—Ç—ã—à—É—É –ø–∞–π—ã–∑—ã:', f"{stats['attendance_percentage']}%"],
    ]
    
    summary_table = Table(summary_data)
    summary_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 11),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    elements.append(summary_table)
    elements.append(Spacer(1, 30))
    
    # Attendance Records Table
    if attendances.exists():
        elements.append(Paragraph("–ö–∞—Ç—ã—à—É—É –ñ–∞–∑—É—É–ª–∞—Ä—ã", styles['Heading2']))
        elements.append(Spacer(1, 10))
        
        data = [['–°—Ç—É–¥–µ–Ω—Ç', '–°–∞–±–∞–∫', '–î–∞—Ç–∞', '–°—Ç–∞—Ç—É—Å']]
        for att in attendances[:50]:  # Limit to 50 records for PDF
            data.append([
                att.student.name,
                att.subject.subject_name if att.subject else '–ù/–î',
                att.date.strftime('%d.%m.%Y'),
                att.get_status_display()
            ])
        
        table = Table(data)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        elements.append(table)
    
    doc.build(elements)
    return response

def export_detailed_excel(attendances):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π Excel –æ—Ç—á–µ—Ç"""
    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename="detailed_attendance_report.xlsx"'
    
    workbook = Workbook()
    
    # Main data sheet
    worksheet = workbook.active
    worksheet.title = "–ö–∞—Ç—ã—à—É—É –ñ–∞–∑—É—É–ª–∞—Ä—ã"
    
    # Headers
    headers = ['–°—Ç—É–¥–µ–Ω—Ç', '–ì—Ä—É–ø–ø–∞', '–°–∞–±–∞–∫', '–î–∞—Ç–∞', '–°—Ç–∞—Ç—É—Å', '–ñ–∞—Ä–∞—Ç—ã–ª–≥–∞–Ω –∫“Ø–Ω“Ø', '–ñ–∞—Ä–∞—Ç–∫–∞–Ω']
    for col_num, header in enumerate(headers, 1):
        worksheet.cell(row=1, column=col_num, value=header)
    
    # Data
    for row_num, att in enumerate(attendances, 2):
        worksheet.cell(row=row_num, column=1, value=att.student.name)
        worksheet.cell(row=row_num, column=2, value=att.student.group.name if att.student.group else '–ù/–î')
        worksheet.cell(row=row_num, column=3, value=att.subject.subject_name if att.subject else '–ù/–î')
        worksheet.cell(row=row_num, column=4, value=att.date.strftime('%d.%m.%Y'))
        worksheet.cell(row=row_num, column=5, value=att.get_status_display())
        worksheet.cell(row=row_num, column=6, value=att.date.strftime('%d.%m.%Y'))
        worksheet.cell(row=row_num, column=7, value=att.created_by.username if att.created_by else '–°–∏—Å—Ç–µ–º–∞')
    
    # Statistics sheet
    stats_sheet = workbook.create_sheet("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    stats_data = [
        ['–ö”©—Ä—Å”©—Ç–∫“Ø—á', '–ú–∞–∞–Ω–∏—Å–∏'],
        ['–ñ–∞–ª–ø—ã –∂–∞–∑—É—É–ª–∞—Ä', attendances.count()],
        ['–ö–∞—Ç—ã—à–∫–∞–Ω–¥–∞—Ä', attendances.filter(status='Present').count()],
        ['–ö–∞—Ç—ã—à–ø–∞–≥–∞–Ω–¥–∞—Ä', attendances.filter(status='Absent').count()],
        ['–ö–µ—á–∏–∫–∫–µ–Ω–¥–µ—Ä', attendances.filter(status='Late').count()],
        ['–£—Ä—É–∫—Å–∞—Ç –º–µ–Ω–µ–Ω –∂–æ–∫—Ç–æ—Ä', attendances.filter(status='Excused').count()],
    ]
    
    for row_num, (label, value) in enumerate(stats_data, 1):
        stats_sheet.cell(row=row_num, column=1, value=label)
        stats_sheet.cell(row=row_num, column=2, value=value)
    
    workbook.save(response)
    return response

def export_pdf(request):
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename="report.pdf"'
    p = canvas.Canvas(response)
    p.drawString(100, 750, "–ö–∞—Ç—ã—à—É—É –û—Ç—á–µ—Ç—É")
    y = 700
    for att in Attendance.objects.all()[:20]:
        p.drawString(100, y, f"{att.student.name} - {att.status} - {att.date}")
        y -= 20
    p.showPage()
    p.save()
    return response

def export_excel(request):
    wb = Workbook()
    ws = wb.active
    ws['A1'] = '–°—Ç—É–¥–µ–Ω—Ç'
    ws['B1'] = '–°–∞–±–∞–∫'
    ws['C1'] = '–°—Ç–∞—Ç—É—Å'
    ws['D1'] = '–î–∞—Ç–∞'
    row = 2
    for att in Attendance.objects.all():
        ws[f'A{row}'] = att.student.name
        ws[f'B{row}'] = att.subject.subject_name if att.subject else '–ù/–î'
        ws[f'C{row}'] = att.status
        ws[f'D{row}'] = str(att.date)
        row += 1
    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename="report.xlsx"'
    wb.save(response)
    return response

# –ñ–∞–ª–ø—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ view (—Ä–æ–ª–¥–æ—Ä–≥–æ –∂–∞—Ä–∞—à–∞ –±–∞–≥—ã—Ç—Ç–æ–æ)
@login_required
def schedule(request):
    """
    –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–º –±–µ—Ç–∏ - –∂–∞“£—ã unified —Å–∏—Å—Ç–µ–º–∞–≥–∞ –±–∞–≥—ã—Ç—Ç–∞–ª–∞—Ç
    """
    # –ë–∞—Ä–¥—ã–∫ —Ä–æ–ª–¥–æ—Ä “Ø—á“Ø–Ω –∂–∞“£—ã unified schedule —Å–∏—Å—Ç–µ–º–∞—Å—ã–Ω–∞ –±–∞–≥—ã—Ç—Ç–æ–æ
    return redirect('unified_schedule')

# ============= –ë–û–®–û–¢–£–£ –°–£–†–ê–ú–î–ê–†–´ =============

@login_required
def submit_leave_request(request):
    """–°—Ç—É–¥–µ–Ω—Ç –±–æ—à–æ—Ç—É—É —Å—É—Ä–∞–º—ã–Ω –∂”©–Ω”©—Ç”©—Ç"""
    if request.user.userprofile.role != 'STUDENT':
        messages.error(request, '–ë—É–ª —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä “Ø—á“Ø–Ω –≥–∞–Ω–∞.')
        return redirect('dashboard')
    
    try:
        student = Student.objects.get(user=request.user)
    except Student.DoesNotExist:
        messages.error(request, '–°—Ç—É–¥–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª–∏ —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫.')
        return redirect('dashboard')
    
    if request.method == 'POST':
        form = LeaveRequestForm(request.POST)
        if form.is_valid():
            leave_request = form.save(commit=False)
            leave_request.student = student
            leave_request.save()
            
            # –ê–≤—Ç–æ–º–∞—Ç—Ç—ã–∫ –±–∏–ª–¥–∏—Ä–º–µ –∂”©–Ω”©—Ç“Ø“Ø
            send_leave_request_notification(leave_request)
            
            messages.success(request, '–ë–æ—à–æ—Ç—É—É —Å—É—Ä–∞–º—ã“£—ã–∑ –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –∂”©–Ω”©—Ç“Ø–ª–¥“Ø. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è–≥–∞ –±–∏–ª–¥–∏—Ä–º–µ –∂”©–Ω”©—Ç“Ø–ª–¥“Ø.')
            return redirect('my_leave_requests')
    else:
        form = LeaveRequestForm()
    
    return render(request, 'leave/submit_request.html', {'form': form})

@login_required
def my_leave_requests(request):
    """–°—Ç—É–¥–µ–Ω—Ç—Ç–∏–Ω ”©–∑ –±–æ—à–æ—Ç—É—É —Å—É—Ä–∞–º–¥–∞—Ä—ã–Ω –∫”©—Ä“Ø“Ø"""
    if request.user.userprofile.role != 'STUDENT':
        messages.error(request, '–ë—É–ª —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä “Ø—á“Ø–Ω –≥–∞–Ω–∞.')
        return redirect('dashboard')
    
    try:
        student = Student.objects.get(user=request.user)
        leave_requests = LeaveRequest.objects.filter(student=student).order_by('-created_at')
    except Student.DoesNotExist:
        leave_requests = []
        messages.error(request, '–°—Ç—É–¥–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª–∏ —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫.')
    
    return render(request, 'leave/my_requests.html', {'leave_requests': leave_requests})

@login_required
@user_passes_test(lambda u: u.userprofile.role in ['ADMIN', 'MANAGER', 'TEACHER'])
def manage_leave_requests(request):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–ª–æ—Ä/–º–µ–Ω–µ–¥–∂–µ—Ä–ª–µ—Ä –±–æ—à–æ—Ç—É—É —Å—É—Ä–∞–º–¥–∞—Ä—ã–Ω –±–∞—à–∫–∞—Ä–∞—Ç"""
    pending_requests = LeaveRequest.objects.filter(status='PENDING').order_by('-created_at')
    all_requests = LeaveRequest.objects.all().order_by('-created_at')
    
    context = {
        'pending_requests': pending_requests,
        'all_requests': all_requests,
    }
    return render(request, 'leave/manage_requests.html', context)

@login_required
@user_passes_test(lambda u: u.userprofile.role in ['ADMIN', 'MANAGER', 'TEACHER'])
def approve_leave_request(request, request_id):
    """–ë–æ—à–æ—Ç—É—É —Å—É—Ä–∞–º—ã–Ω –±–µ–∫–∏—Ç“Ø“Ø"""
    leave_request = get_object_or_404(LeaveRequest, id=request_id)
    
    if request.method == 'POST':
        action = request.POST.get('action')
        if action == 'approve':
            leave_request.status = 'APPROVED'
            leave_request.approved_by = request.user
            leave_request.save()
            
            # –ë–µ–∫–∏—Ç–∏–ª–≥–µ–Ω –º”©”©–Ω”©—Ç“Ø–Ω–¥”© –∞–≤—Ç–æ–º–∞—Ç—Ç—ã–∫ "Excused" –±–µ–ª–≥–∏—Å–∏ –∫–æ—é—É
            current_date = leave_request.start_date
            while current_date <= leave_request.end_date:
                # –û—à–æ–ª —Å—Ç—É–¥–µ–Ω—Ç—Ç–∏–Ω –æ—à–æ–ª –∫“Ø–Ω–¥”©–≥“Ø —Å–∞–±–∞–∫—Ç–∞—Ä—ã “Ø—á“Ø–Ω Excused –¥–µ–ø –±–µ–ª–≥–∏–ª”©”©
                schedules = Schedule.objects.filter(group=leave_request.student.group)
                for schedule in schedules:
                    Attendance.objects.update_or_create(
                        student=leave_request.student,
                        subject=schedule.subject,
                        date=current_date,
                        defaults={
                            'status': 'Excused',
                            'created_by': request.user,
                            'leave_request': leave_request
                        }
                    )
                current_date += timedelta(days=1)
            
            # –ë–∏–ª–¥–∏—Ä–º–µ –∂”©–Ω”©—Ç“Ø“Ø
            send_leave_decision_notification(leave_request, request.user)
            
            messages.success(request, f'{leave_request.student.name}–¥—ã–Ω –±–æ—à–æ—Ç—É—É —Å—É—Ä–∞–º—ã –±–µ–∫–∏—Ç–∏–ª–¥–∏. –°—Ç—É–¥–µ–Ω—Ç–∫–µ –∂–∞–Ω–∞ –∞—Ç–∞-—ç–Ω–µ–ª–µ—Ä–∏–Ω–µ –±–∏–ª–¥–∏—Ä–º–µ –∂”©–Ω”©—Ç“Ø–ª–¥“Ø.')
        
        elif action == 'reject':
            leave_request.status = 'REJECTED' 
            leave_request.approved_by = request.user
            leave_request.save()
            
            # –ë–∏–ª–¥–∏—Ä–º–µ –∂”©–Ω”©—Ç“Ø“Ø
            send_leave_decision_notification(leave_request, request.user)
            
            messages.info(request, f'{leave_request.student.name}–¥—ã–Ω –±–æ—à–æ—Ç—É—É —Å—É—Ä–∞–º—ã —á–µ—Ç–∫–µ –∫–∞–≥—ã–ª–¥—ã. –°—Ç—É–¥–µ–Ω—Ç–∫–µ –∂–∞–Ω–∞ –∞—Ç–∞-—ç–Ω–µ–ª–µ—Ä–∏–Ω–µ –±–∏–ª–¥–∏—Ä–º–µ –∂”©–Ω”©—Ç“Ø–ª–¥“Ø.')
    
    return redirect('manage_leave_requests')

# ============= NOTIFICATION VIEWS =============

@login_required
def notifications(request):
    """–ö–æ–ª–¥–æ–Ω—É—É—á—É–Ω—É–Ω –±–∏–ª–¥–∏—Ä–º–µ–ª–µ—Ä–∏–Ω –∫”©—Ä—Å”©—Ç“Ø“Ø"""
    user_notifications = Notification.objects.filter(recipient=request.user)
    unread_count = user_notifications.filter(is_read=False).count()
    
    return render(request, 'notifications/list.html', {
        'notifications': user_notifications,
        'unread_count': unread_count
    })

@login_required
def mark_notification_read(request, notification_id):
    """–ë–∏–ª–¥–∏—Ä–º–µ–Ω–∏ –æ–∫—É–ª–≥–∞–Ω –¥–µ–ø –±–µ–ª–≥–∏–ª”©”©"""
    notification = get_object_or_404(Notification, id=notification_id, recipient=request.user)
    notification.is_read = True
    notification.save()
    
    if request.headers.get('HX-Request'):
        # HTMX request –±–æ–ª—Å–æ
        return JsonResponse({'success': True})
    
    return redirect('notifications')

@login_required
def mark_all_notifications_read(request):
    """–ë–∞—Ä–¥—ã–∫ –±–∏–ª–¥–∏—Ä–º–µ–ª–µ—Ä–¥–∏ –æ–∫—É–ª–≥–∞–Ω –¥–µ–ø –±–µ–ª–≥–∏–ª”©”©"""
    Notification.objects.filter(recipient=request.user, is_read=False).update(is_read=True)
    messages.success(request, '–ë–∞—Ä–¥—ã–∫ –±–∏–ª–¥–∏—Ä–º–µ–ª–µ—Ä –æ–∫—É–ª–≥–∞–Ω –¥–µ–ø –±–µ–ª–≥–∏–ª–µ–Ω–¥–∏.')
    return redirect('notifications')

@login_required
@user_passes_test(lambda u: u.userprofile.role in ['ADMIN', 'MANAGER'])
def send_bulk_notification(request):
    """–ö”©–ø—Ç”©–≥”©–Ω –∫–æ–ª–¥–æ–Ω—É—É—á—É–ª–∞—Ä–≥–∞ –±–∏–ª–¥–∏—Ä–º–µ –∂”©–Ω”©—Ç“Ø“Ø"""
    if request.method == 'POST':
        title = request.POST.get('title')
        message = request.POST.get('message')
        recipient_type = request.POST.get('recipient_type')  # all_students, all_parents, specific_group
        group_id = request.POST.get('group_id')
        
        recipients = []
        
        if recipient_type == 'all_students':
            recipients = User.objects.filter(userprofile__role='STUDENT')
        elif recipient_type == 'all_parents':
            recipients = User.objects.filter(userprofile__role='PARENT')
        elif recipient_type == 'specific_group' and group_id:
            recipients = User.objects.filter(
                student__group_id=group_id
            )
        
        # –ë–∏–ª–¥–∏—Ä–º–µ–ª–µ—Ä–¥–∏ —Ç“Ø–∑“Ø“Ø
        notifications_to_create = []
        for recipient in recipients:
            notifications_to_create.append(
                Notification(
                    recipient=recipient,
                    sender=request.user,
                    notification_type='GENERAL',
                    title=title,
                    message=message
                )
            )
        
        # Bulk create –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        Notification.objects.bulk_create(notifications_to_create)
        
        messages.success(request, f'{len(recipients)} –∫–æ–ª–¥–æ–Ω—É—É—á—É–≥–∞ –±–∏–ª–¥–∏—Ä–º–µ –∂”©–Ω”©—Ç“Ø–ª–¥“Ø.')
        return redirect('notifications')
    
    groups = Group.objects.all()
    return render(request, 'notifications/bulk_send.html', {'groups': groups})

# ============= SCHEDULE MANAGEMENT =============

@login_required
@login_required
def manage_schedule(request):
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–∞—à–∫–∞—Ä—É—É (–ê–¥–º–∏–Ω/–ú–µ–Ω–µ–¥–∂–µ—Ä “Ø—á“Ø–Ω)"""
    profile = UserProfile.objects.get(user=request.user)
    
    # –£—Ä—É–∫—Å–∞—Ç —Ç–µ–∫—à–µ—Ä“Ø“Ø
    if profile.role not in ['ADMIN', 'MANAGER']:
        messages.error(request, '–°–∏–∑–≥–µ –±—É–ª –±–µ—Ç–∫–µ –∫–∏—Ä“Ø“Ø–≥”© —É—Ä—É–∫—Å–∞—Ç –∂–æ–∫.')
        return redirect('dashboard')
    
    if request.method == 'POST':
        try:
            subject_id = request.POST.get('subject_id')
            group_id = request.POST.get('group_id')
            day = request.POST.get('day')
            start_time = request.POST.get('start_time')
            end_time = request.POST.get('end_time')
            
            if not all([subject_id, group_id, day, start_time, end_time]):
                return JsonResponse({'error': '–ë–∞—Ä–¥—ã–∫ —Ç–∞–ª–∞–ø–∫–∞ —Å–∞–π –º–∞–∞–ª—ã–º–∞—Ç—Ç—ã —Ç–æ–ª—Ç—É—Ä—É“£—É–∑'}, status=400)
            
            subject = Subject.objects.get(id=subject_id)
            group = Group.objects.get(id=group_id)
            
            # –£–±–∞–∫—ã—Ç –∫–∞–π—Ç–∞–ª–∞–Ω—É—É—Å—É–Ω —Ç–µ–∫—à–µ—Ä“Ø“Ø
            conflict = Schedule.objects.filter(
                group=group,
                day=day,
                start_time__lt=end_time,
                end_time__gt=start_time
            ).exists()
            
            if conflict:
                return JsonResponse({'error': '–ë—É–ª —É–±–∞–∫—ã—Ç—Ç–∞ –≥—Ä—É–ø–ø–∞–¥–∞ –±–∞—à–∫–∞ —Å–∞–±–∞–∫ –±–∞—Ä'}, status=400)
            
            # –ú—É–≥–∞–ª–∏–º–¥–∏–Ω —É–±–∞–∫—ã—Ç –∫–∞–π—Ç–∞–ª–∞–Ω—É—É—Å—É–Ω —Ç–µ–∫—à–µ—Ä“Ø“Ø
            teacher_conflict = Schedule.objects.filter(
                subject__teacher=subject.teacher,
                day=day,
                start_time__lt=end_time,
                end_time__gt=start_time
            ).exists()
            
            if teacher_conflict:
                return JsonResponse({'error': '–ë—É–ª —É–±–∞–∫—ã—Ç—Ç–∞ –º—É–≥–∞–ª–∏–º –±–∞—à–∫–∞ –≥—Ä—É–ø–ø–∞–¥–∞ —Å–∞–±–∞–∫ ”©—Ç”©—Ç'}, status=400)
            
            # –ñ–∞“£—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç“Ø–∑“Ø“Ø
            schedule = Schedule.objects.create(
                subject=subject,
                group=group,
                day=day,
                start_time=start_time,
                end_time=end_time
            )
            
            return JsonResponse({'success': True, 'message': '–°–∞–±–∞–∫ –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –∫–æ—à—É–ª–¥—É'})
            
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    # –§–∏–ª—Ç—Ä–ª–µ—Ä
    course_filter = request.GET.get('course')
    group_filter = request.GET.get('group') 
    teacher_filter = request.GET.get('teacher')
    day_filter = request.GET.get('day')
    
    # –ë–∞—Ä–¥—ã–∫ –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä
    courses = Course.objects.all().order_by('year')
    groups = Group.objects.select_related('course').all().order_by('course__year', 'name')
    teachers = Teacher.objects.all().order_by('name')
    subjects = Subject.objects.select_related('teacher', 'course').all()
    
    # –ö—É—Ä—Å –±–æ—é–Ω—á–∞ –∏–µ—Ä–∞—Ä—Ö–∏—è —Ç“Ø–∑“Ø“Ø
    courses_hierarchy = []
    
    for course in courses:
        course_groups = groups.filter(course=course)
        
        if course_filter and str(course.id) != course_filter:
            continue
            
        groups_data = []
        for group in course_groups:
            if group_filter and str(group.id) != group_filter:
                continue
                
            # –ì—Ä—É–ø–ø–∞–Ω—ã–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ—Å–∏
            schedules = Schedule.objects.filter(group=group).select_related(
                'subject__teacher'
            ).order_by('day', 'time_slot__order')
            
            # –§–∏–ª—Ç—Ä–ª–µ—Ä–¥–∏ –∫–æ–ª–¥–æ–Ω—É—É
            if teacher_filter:
                schedules = schedules.filter(subject__teacher_id=teacher_filter)
            if day_filter:
                schedules = schedules.filter(day=day_filter)
            
            # –°—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä–¥–∏–Ω —Å–∞–Ω—ã
            students_count = Student.objects.filter(group=group).count()
            
            groups_data.append({
                'group': group,
                'schedules': schedules,
                'students_count': students_count
            })
        
        if groups_data:  # –≠–≥–µ—Ä –≥—Ä—É–ø–ø–∞–ª–∞—Ä –±–∞—Ä –±–æ–ª—Å–æ –≥–∞–Ω–∞ –∫–æ—à—É—É
            courses_hierarchy.append({
                'course': course,
                'groups': groups_data
            })
    
    context = {
        'courses_hierarchy': courses_hierarchy,
        'courses': courses,
        'groups': groups,
        'all_groups': groups,  # Modal “Ø—á“Ø–Ω
        'teachers': teachers,
        'subjects': subjects,
    }
    
    return render(request, 'manage_schedule.html', context)

@login_required 
def delete_schedule(request, schedule_id):
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ”©—á“Ø—Ä“Ø“Ø"""
    profile = UserProfile.objects.get(user=request.user)
    
    if profile.role not in ['ADMIN', 'MANAGER']:
        return JsonResponse({'error': '–£—Ä—É–∫—Å–∞—Ç –∂–æ–∫'}, status=403)
    
    try:
        schedule = Schedule.objects.get(id=schedule_id)
        schedule.delete()
        return JsonResponse({'success': True, 'message': '–°–∞–±–∞–∫ –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø ”©—á“Ø—Ä“Ø–ª–¥“Ø'})
    except Schedule.DoesNotExist:
        return JsonResponse({'error': '–°–∞–±–∞–∫ —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫'}, status=404)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

@login_required
def manage_subjects(request):
    """–°–∞–±–∞–∫—Ç–∞—Ä (–ü—Ä–µ–¥–º–µ—Ç—Ç–µ—Ä) –∫”©—Ä“Ø“Ø –ø–∞–Ω–µ–ª–∏"""
    profile = UserProfile.objects.get(user=request.user)
    
    # –£—Ä—É–∫—Å–∞—Ç —Ç–µ–∫—à–µ—Ä“Ø“Ø - –±–∞—Ä–¥—ã–∫ —Ä–æ–ª—å –∫–∏—Ä–µ –∞–ª–∞—Ç, –±–∏—Ä–æ–∫ ADMIN/MANAGER –≥–∞–Ω–∞ ”©–∑–≥”©—Ä—Ç”© –∞–ª–∞—Ç
    if profile.role not in ['ADMIN', 'MANAGER', 'TEACHER']:
        messages.error(request, '–°–∏–∑–≥–µ –±—É–ª –±–µ—Ç–∫–µ –∫–∏—Ä“Ø“Ø–≥”© —É—Ä—É–∫—Å–∞—Ç –∂–æ–∫.')
        return redirect('dashboard')
    
    # –§–∏–ª—Ç—Ä–ª–µ—Ä
    course_filter = request.GET.get('course')
    teacher_filter = request.GET.get('teacher')
    search = request.GET.get('search', '').strip()
    
    # –ù–µ–≥–∏–∑–≥–∏ –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä
    subjects = Subject.objects.select_related('teacher', 'course').all()
    courses = Course.objects.all().order_by('year')
    teachers = Teacher.objects.all().order_by('name')
    
    # –§–∏–ª—Ç—Ä–ª–µ—Ä–¥–∏ –∫–æ–ª–¥–æ–Ω—É—É
    if course_filter:
        subjects = subjects.filter(course_id=course_filter)
    if teacher_filter:
        subjects = subjects.filter(teacher_id=teacher_filter)
    if search:
        subjects = subjects.filter(subject_name__icontains=search)
    
    subjects = subjects.order_by('course__year', 'subject_name')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Å–µ–ø—Ç”©”©
    total_subjects = subjects.count()
    subjects_by_course = {}
    subjects_by_teacher = {}
    
    for subject in subjects:
        # –ö—É—Ä—Å –±–æ—é–Ω—á–∞ —Ç–æ–ø—Ç–æ–æ
        course_name = subject.course.name
        if course_name not in subjects_by_course:
            subjects_by_course[course_name] = []
        subjects_by_course[course_name].append(subject)
        
        # –ú—É–≥–∞–ª–∏–º –±–æ—é–Ω—á–∞ —Ç–æ–ø—Ç–æ–æ
        teacher_name = subject.teacher.name if subject.teacher else "–ú—É–≥–∞–ª–∏–º –¥–∞–π—ã–Ω–¥–∞–ª–≥–∞–Ω –∂–æ–∫"
        if teacher_name not in subjects_by_teacher:
            subjects_by_teacher[teacher_name] = []
        subjects_by_teacher[teacher_name].append(subject)
    
    # –ê—Ä –±–∏—Ä —Å–∞–±–∞–∫ “Ø—á“Ø–Ω –∫–æ—à—É–º—á–∞ –º–∞–∞–ª—ã–º–∞—Ç
    subjects_data = []
    for subject in subjects:
        # –ë—É–ª —Å–∞–±–∞–∫ –±–æ—é–Ω—á–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∞–Ω—ã
        schedule_count = Schedule.objects.filter(subject=subject).count()
        
        # –ë—É–ª —Å–∞–±–∞–∫ –±–æ—é–Ω—á–∞ —Å—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä–¥–∏–Ω —Å–∞–Ω—ã
        students_count = Student.objects.filter(
            group__schedule__subject=subject
        ).distinct().count()
        
        subjects_data.append({
            'subject': subject,
            'schedule_count': schedule_count,
            'students_count': students_count
        })
    
    context = {
        'subjects_data': subjects_data,
        'courses': courses,
        'teachers': teachers,
        'total_subjects': total_subjects,
        'subjects_by_course': subjects_by_course,
        'subjects_by_teacher': subjects_by_teacher,
        'course_filter': course_filter,
        'teacher_filter': teacher_filter,
        'search': search,
        'can_edit': profile.role in ['ADMIN', 'MANAGER']
    }
    
    return render(request, 'manage_subjects.html', context)

@login_required
@login_required
@login_required
def universal_schedule(request):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª–¥—É—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫”©—Ä“Ø“Ø - –±–∞—Ä–¥—ã–∫ —Ä–æ–ª–¥–æ—Ä “Ø—á“Ø–Ω (–∂–∞“£—ã–ª–∞–Ω–≥–∞–Ω –≤–µ—Ä—Å–∏—è)"""
    try:
        profile = UserProfile.objects.get(user=request.user)
    except UserProfile.DoesNotExist:
        profile = UserProfile.objects.create(user=request.user, role='STUDENT')
    
    # –ë–∞—Ä–¥—ã–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–Ω—ã –∞–ª—É—É (–Ω–µ–≥–∏–∑–≥–∏ query)
    schedules_query = Schedule.objects.select_related(
        'subject__teacher',
        'group__course'
    ).prefetch_related(
        'subject',
        'group'
    ).all()
    
    # –¢–∞—Ä—Ç–∏–ø–∫–µ —Å–∞–ª—É—É - –∫“Ø–Ω, —É–±–∞–∫—ã—Ç, –≥—Ä—É–ø–ø–∞ –±–æ—é–Ω—á–∞
    schedules = schedules_query.order_by('day', 'time_slot__order', 'group__name')    # –ö“Ø–Ω–¥”©—Ä —Ç–∏–∑–º–µ—Å–∏ —Ç–∞—Ä—Ç–∏–ø–∫–µ —Å–∞–ª—ã–Ω–≥–∞–Ω
    days_choices = [
        ('Monday', '–î“Ø–π—à”©–º–±“Ø'),
        ('Tuesday', '–®–µ–π—à–µ–º–±–∏'),
        ('Wednesday', '–®–∞—Ä—à–µ–º–±–∏'), 
        ('Thursday', '–ë–µ–π—à–µ–º–±–∏'),
        ('Friday', '–ñ—É–º–∞'),
        ('Saturday', '–ò—à–µ–º–±–∏'),
        ('Sunday', '–ñ–µ–∫—à–µ–º–±–∏')
    ]    # –ö“Ø–Ω —Ç–∞—Ä—Ç–∏–±–∏ –±–æ—é–Ω—á–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (1=–î“Ø–π—à”©–º–±“Ø, 7=–ñ–µ–∫—à–µ–º–±–∏)
    day_order = {
        'Monday': 1,
        'Tuesday': 2,
        'Wednesday': 3,
        'Thursday': 4,
        'Friday': 5,
        'Saturday': 6,
        'Sunday': 7
    }
    
    # –¢–∞—Ä—Ç–∏–ø–∫–µ —Å–∞–ª—É—É - –∞–ª–≥–∞—á –∫“Ø–Ω, –∞–Ω–∞–Ω —É–±–∞–∫—ã—Ç, –∞–Ω–∞–Ω –≥—Ä—É–ø–ø–∞
    schedules = schedules_query.extra(
        select={
            'day_order': f"CASE day "
                        f"WHEN 'Monday' THEN 1 "
                        f"WHEN 'Tuesday' THEN 2 "
                        f"WHEN 'Wednesday' THEN 3 "
                        f"WHEN 'Thursday' THEN 4 "
                        f"WHEN 'Friday' THEN 5 "
                        f"WHEN 'Saturday' THEN 6 "
                        f"WHEN 'Sunday' THEN 7 "
                        f"END"
        }
    ).order_by('day_order', 'time_slot__order', 'group__name')
    
    # –ö“Ø–Ω –±–æ—é–Ω—á–∞ –≥—Ä—É–ø–ø–∞–ª–∞–ø —á—ã–≥–∞—Ä—É—É
    schedules_by_day = {}
    for day_code, day_name in days_choices:
        day_schedules = schedules.filter(day=day_code)
        if day_schedules.exists():
            schedules_by_day[day_code] = {
                'name': day_name,
                'schedules': day_schedules,
                'count': day_schedules.count()
            }
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_schedules = schedules.count()
    unique_groups = schedules.values('group').distinct().count()
    unique_teachers = schedules.values('subject__teacher').distinct().count()
    unique_subjects = schedules.values('subject').distinct().count()
    
    # –ë“Ø–≥“Ø–Ω–∫“Ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    from datetime import date
    today = date.today()
    today_day_name = today.strftime('%A')  # Monday, Tuesday, etc.
    today_schedules = schedules.filter(day=today_day_name)
    
    context = {
        # –ù–µ–≥–∏–∑–≥–∏ –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä (–∂–∞“£—ã template “Ø—á“Ø–Ω)
        'schedules': schedules,
        'schedules_by_day': schedules_by_day,  # –ö“Ø–Ω –±–æ—é–Ω—á–∞ –≥—Ä—É–ø–ø–∞–ª–∞–Ω–≥–∞–Ω
        'today_schedules': today_schedules,
        'today_day_name': today_day_name,
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        'total_schedules': total_schedules,
        'unique_groups': unique_groups,
        'total_teachers': unique_teachers,
        'total_subjects': unique_subjects,
        'total_rooms': len(schedules.values_list('room', flat=True).distinct()),
        
        # –ö–æ–ª–¥–æ–Ω—É—É—á—É –º–∞–∞–ª—ã–º–∞—Ç—ã
        'user_role': profile.role,
        'today': today,
    }
    
    return render(request, 'universal_schedule.html', context)

def weekly_schedule(request):
    """–ñ—É–º–∞–ª—ã–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü–∞—Å—ã - –∞—Ä –∫“Ø–Ω “Ø—á“Ø–Ω —Ç–∞–∫ —Å–∞–±–∞–∫—Ç–∞—Ä"""
    profile = UserProfile.objects.get(user=request.user)
    
    # –ë–∞—Ä–¥—ã–∫ —Ä–æ–ª—å “Ø—á“Ø–Ω –∞—á—ã–∫, –±–∏—Ä–æ–∫ –∞—Ä –±–∏—Ä —Ä–æ–ª—å ”©–∑ –º–∞–∞–ª—ã–º–∞—Ç—ã–Ω –∫”©—Ä”©—Ç
    
    # –ö“Ø–Ω–¥”©—Ä —Ç–∏–∑–º–µ—Å–∏ - —Å—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä “Ø—á“Ø–Ω –∂—É–º–∞ –∫“Ø–Ω–¥”©—Ä“Ø –≥–∞–Ω–∞
    if profile.role == 'STUDENT':
        days = [
            ('Monday', '–î“Ø–π—à”©–º–±“Ø'),
            ('Tuesday', '–®–µ–π—à–µ–º–±–∏'), 
            ('Wednesday', '–®–∞—Ä—à–µ–º–±–∏'),
            ('Thursday', '–ë–µ–π—à–µ–º–±–∏'),
            ('Friday', '–ñ—É–º–∞'),
        ]
    else:
        # –ë–∞—à–∫–∞ —Ä–æ–ª–ª–æ—Ä “Ø—á“Ø–Ω –±–∞—Ä–¥—ã–∫ –∫“Ø–Ω–¥”©—Ä
        days = [
            ('Monday', '–î“Ø–π—à”©–º–±“Ø'),
            ('Tuesday', '–®–µ–π—à–µ–º–±–∏'), 
            ('Wednesday', '–®–∞—Ä—à–µ–º–±–∏'),
            ('Thursday', '–ë–µ–π—à–µ–º–±–∏'),
            ('Friday', '–ñ—É–º–∞'),
            ('Saturday', '–ò—à–µ–º–±–∏'),
        ]
    
    # –†–æ–ª—å –±–æ—é–Ω—á–∞ —Ñ–∏–ª—Ç–µ—Ä –∂–∞–Ω–∞ –∂—É–º–∞ –∫“Ø–Ω–¥”©—Ä“Ø
    schedules_query = Schedule.objects.select_related('subject__teacher', 'group__course').all()
    
    if profile.role == 'STUDENT':
        try:
            student = Student.objects.get(user=request.user)
            # –°—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä “Ø—á“Ø–Ω –∂—É–º–∞ –∫“Ø–Ω–¥”©—Ä“Ø –≥–∞–Ω–∞
            weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
            schedules_query = schedules_query.filter(
                group=student.group,
                day__in=weekdays
            )
        except Student.DoesNotExist:
            schedules_query = Schedule.objects.none()
    elif profile.role == 'TEACHER':
        try:
            teacher = Teacher.objects.get(user=request.user)
            schedules_query = schedules_query.filter(subject__teacher=teacher)
        except Teacher.DoesNotExist:
            schedules_query = Schedule.objects.none()
    # MANAGER/ADMIN “Ø—á“Ø–Ω –±–∞—Ä–¥—ã–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–ª–µ—Ä –∫”©—Ä“Ø–Ω”©—Ç
    
    # –§–∏–ª—Ç—Ä–ª–µ—Ä (MANAGER/ADMIN “Ø—á“Ø–Ω)
    course_filter = request.GET.get('course')
    group_filter = request.GET.get('group')
    teacher_filter = request.GET.get('teacher')
    
    if course_filter:
        schedules_query = schedules_query.filter(group__course_id=course_filter)
    if group_filter:
        schedules_query = schedules_query.filter(group_id=group_filter)
    if teacher_filter:
        schedules_query = schedules_query.filter(subject__teacher_id=teacher_filter)
    
    schedules = schedules_query.order_by('time_slot__order')
    
    # –¢–∞–±–ª–∏—Ü–∞ “Ø—á“Ø–Ω –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä–¥—ã —É—é—à—Ç—É—Ä—É—É
    schedule_matrix = {}
    
    # TimeSlot'—Ç–æ—Ä–¥—É –∞–ª—É—É (–∞–¥–º–∏–Ω —Ç–∞—Ä–∞–±—ã–Ω–∞–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–ª–∞–Ω–≥–∞–Ω)
    from core.models import TimeSlot
    time_slots = TimeSlot.objects.filter(is_active=True).order_by('order')
    
    for day_code, day_name in days:
        schedule_matrix[day_code] = {}
        for time_slot in time_slots:
            # –ë—É–ª –∫“Ø–Ω –∂–∞–Ω–∞ —É–±–∞–∫—ã—Ç —Å–ª–æ—Ç—É “Ø—á“Ø–Ω —Å–∞–±–∞–∫—Ç–∞—Ä–¥—ã —Ç–∞–±—É—É
            day_schedules = schedules.filter(
                day=day_code,
                time_slot=time_slot
            )
            
            schedule_matrix[day_code][time_slot.name] = {
                'time_range': f"{time_slot.start_time.strftime('%H:%M')} - {time_slot.end_time.strftime('%H:%M')}",
                'schedules': day_schedules
            }
    
    # –§–∏–ª—Ç—Ä “Ø—á“Ø–Ω –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä
    courses = Course.objects.all().order_by('year') if profile.role in ['ADMIN', 'MANAGER'] else []
    groups = Group.objects.select_related('course').all().order_by('course__year', 'name') if profile.role in ['ADMIN', 'MANAGER'] else []
    teachers = Teacher.objects.all().order_by('name') if profile.role in ['ADMIN', 'MANAGER'] else []
    
    context = {
        'days': days,
        'time_slots': list(time_slots),  # TimeSlot QuerySet'–∏–Ω list'–∫–µ –∞–π–ª–∞–Ω–¥—ã—Ä—É—É
        'schedule_matrix': schedule_matrix,
        'courses': courses,
        'groups': groups,
        'teachers': teachers,
        'course_filter': course_filter,
        'group_filter': group_filter,
        'teacher_filter': teacher_filter,
        'user_role': profile.role,
    }
    
    return render(request, 'weekly_schedule.html', context)


# ============= –ü–†–û–§–ò–õ –ñ–ê–ù–ê –ö–û–õ–î–û–ù–£–£–ß–£ –ë–ê–®–ö–ê–†–£–£ =============

@login_required
def profile_view(request):
    """–ö–æ–ª–¥–æ–Ω—É—É—á—É–Ω—É–Ω –ø—Ä–æ—Ñ–∏–ª–∏–Ω –∫”©—Ä—Å”©—Ç“Ø“Ø"""
    try:
        profile = request.user.userprofile
    except UserProfile.DoesNotExist:
        # –≠–≥–µ—Ä –ø—Ä–æ—Ñ–∏–ª –∂–æ–∫ –±–æ–ª—Å–æ, –∂–∞“£—ã—Å—ã–Ω —Ç“Ø–∑“Ø“Ø
        profile = UserProfile.objects.create(user=request.user)
    
    context = {
        'profile': profile,
        'user': request.user,
    }
    return render(request, 'profile/profile_view.html', context)


@login_required
def profile_edit(request):
    """–ü—Ä–æ—Ñ–∏–ª–¥–∏ ”©–∑–≥”©—Ä—Ç“Ø“Ø"""
    try:
        profile = request.user.userprofile
    except UserProfile.DoesNotExist:
        profile = UserProfile.objects.create(user=request.user)

    if request.method == 'POST':
        user_form = UserUpdateForm(request.POST, instance=request.user)
        profile_form = UserProfileForm(request.POST, request.FILES, instance=profile)
        
        if user_form.is_valid() and profile_form.is_valid():
            user_form.save()
            profile_form.save()
            # –ü—Ä–æ—Ñ–∏–ª–¥–∏–Ω —Ç–æ–ª—É–∫—Ç—É–≥—É–Ω —Ç–µ–∫—à–µ—Ä“Ø“Ø
            profile.check_profile_completeness()
            messages.success(request, '–ü—Ä–æ—Ñ–∏–ª–∏“£–∏–∑ –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –∂–∞“£—ã—Ä—Ç—ã–ª–¥—ã!')
            return redirect('profile_view')
    else:
        user_form = UserUpdateForm(instance=request.user)
        profile_form = UserProfileForm(instance=profile)

    context = {
        'user_form': user_form,
        'profile_form': profile_form,
        'profile': profile,
    }
    return render(request, 'profile/profile_edit.html', context)


@login_required
def change_password(request):
    """–°—ã—Ä —Å”©–∑–¥“Ø ”©–∑–≥”©—Ä—Ç“Ø“Ø"""
    if request.method == 'POST':
        form = PasswordChangeCustomForm(user=request.user, data=request.POST)
        if form.is_valid():
            request.user.set_password(form.cleaned_data['new_password1'])
            request.user.save()
            messages.success(request, '–°—ã—Ä —Å”©–∑“Ø“£“Ø–∑ –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø ”©–∑–≥”©—Ä—Ç“Ø–ª–¥“Ø! –ö–∞–π—Ä–∞–¥–∞–Ω –∫–∏—Ä–∏“£–∏–∑.')
            return redirect('login')
    else:
        form = PasswordChangeCustomForm(user=request.user)

    context = {
        'form': form,
    }
    return render(request, 'profile/change_password.html', context)


@login_required
def profile_photo_delete(request):
    """–ü—Ä–æ—Ñ–∏–ª —Å“Ø—Ä”©—Ç“Ø–Ω ”©—á“Ø—Ä“Ø“Ø"""
    if request.method == 'POST':
        try:
            profile = request.user.userprofile
            if profile.profile_photo:
                profile.profile_photo.delete()
                profile.save()
                messages.success(request, '–ü—Ä–æ—Ñ–∏–ª —Å“Ø—Ä”©—Ç“Ø –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø ”©—á“Ø—Ä“Ø–ª–¥“Ø.')
            else:
                messages.info(request, '–ü—Ä–æ—Ñ–∏–ª —Å“Ø—Ä”©—Ç“Ø –∂–æ–∫.')
        except UserProfile.DoesNotExist:
            messages.error(request, '–ü—Ä–æ—Ñ–∏–ª —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫.')
        
        return redirect('profile_edit')
    
    return redirect('profile_view')


@login_required  
def profile_completion_check(request):
    """–ü—Ä–æ—Ñ–∏–ª–¥–∏–Ω —Ç–æ–ª—É–∫—Ç—É–≥—É–Ω —Ç–µ–∫—à–µ—Ä“Ø“Ø (AJAX)"""
    try:
        profile = request.user.userprofile
        is_complete = profile.check_profile_completeness()
        
        completion_data = {
            'is_complete': is_complete,
            'missing_fields': [],
            'completion_percentage': 0
        }
        
        # –ö–µ—Ä–µ–∫—Ç“Ø“Ø —Ç–∞–ª–∞–∞–ª–∞—Ä
        required_fields = [
            ('first_name', '–ê—Ç—ã', request.user.first_name),
            ('last_name', '–§–∞–º–∏–ª–∏—è—Å—ã', request.user.last_name),
            ('email', 'Email', request.user.email),
            ('phone_number', '–¢–µ–ª–µ—Ñ–æ–Ω', profile.phone_number),
        ]
        
        filled_count = 0
        total_count = len(required_fields)
        
        for field_name, field_label, field_value in required_fields:
            if not field_value:
                completion_data['missing_fields'].append(field_label)
            else:
                filled_count += 1
        
        completion_data['completion_percentage'] = int((filled_count / total_count) * 100)
        
        return JsonResponse(completion_data)
        
    except UserProfile.DoesNotExist:
        return JsonResponse({
            'is_complete': False,
            'missing_fields': ['–ü—Ä–æ—Ñ–∏–ª —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫'],
            'completion_percentage': 0
        })


def get_user_profile_or_create(user):
    """–ö–æ–ª–¥–æ–Ω—É—É—á—É–Ω—É–Ω –ø—Ä–æ—Ñ–∏–ª–∏–Ω –∞–ª—É—É –∂–µ –∂–æ–∫ –±–æ–ª—Å–æ –∂–∞“£—ã—Å—ã–Ω —Ç“Ø–∑“Ø“Ø"""
    try:
        return user.userprofile
    except UserProfile.DoesNotExist:
        return UserProfile.objects.create(user=user)


@login_required
@csrf_exempt
def mark_student_attendance(request, schedule_id):
    """–°—Ç—É–¥–µ–Ω—Ç ”©–∑“Ø–Ω“Ø–Ω –∫–∞—Ç—ã—à—É—É—Å—É–Ω –±–µ–ª–≥–∏–ª”©”©"""
    if request.method != 'POST':
        return JsonResponse({'error': 'POST method required'}, status=405)
    
    try:
        schedule = get_object_or_404(Schedule, id=schedule_id)
        student_profile = request.user.userprofile
        
        # –°—Ç—É–¥–µ–Ω—Ç —ç–∫–µ–Ω–∏–Ω —Ç–µ–∫—à–µ—Ä“Ø“Ø
        if student_profile.role != 'STUDENT':
            return JsonResponse({'error': 'Only students can mark their own attendance'}, status=403)
        
        # –°—Ç—É–¥–µ–Ω—Ç—Ç–∏–Ω –±—É–ª –≥—Ä—É–ø–ø–∞–¥–∞ —ç–∫–µ–Ω–∏–Ω —Ç–µ–∫—à–µ—Ä“Ø“Ø
        try:
            student = Student.objects.get(user=request.user)
            if student.group != schedule.group:
                return JsonResponse({'error': 'You are not enrolled in this class'}, status=403)
        except Student.DoesNotExist:
            return JsonResponse({'error': 'Student profile not found'}, status=404)
        
        # –£—á—É—Ä–¥–∞–≥—É –∂—É–º–∞ “Ø—á“Ø–Ω –≥–∞–Ω–∞ –∫–∞—Ç—ã—à—É—É –±–µ–ª–≥–∏–ª”©”©–≥”© —É—Ä—É–∫—Å–∞—Ç –±–µ—Ä“Ø“Ø
        from datetime import datetime, timedelta
        today = datetime.now().date()
        
        # –ñ—É–º–∞–Ω—ã–Ω –±–∞—à—Ç–∞–ª—ã—à—ã (–¥“Ø–π—à”©–º–±“Ø)
        days_since_monday = today.weekday()
        week_start = today - timedelta(days=days_since_monday)
        week_end = week_start + timedelta(days=6)
        
        # Schedule –∫“Ø–Ω“Ø–Ω –∞–ª—É—É
        schedule_date = today  # –ê–∑—ã—Ä—ã–Ω—á–∞ –±“Ø–≥“Ø–Ω–∫“Ø –∫“Ø–Ω “Ø—á“Ø–Ω
        
        if not (week_start <= schedule_date <= week_end):
            return JsonResponse({'error': 'Attendance can only be marked for current week'}, status=400)
        
        # JSON –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä–¥—ã –∞–ª—É—É
        data = json.loads(request.body)
        status = data.get('status')
        
        if status not in ['Present', 'Absent', 'Late']:
            return JsonResponse({'error': 'Invalid attendance status'}, status=400)
        
        # Attendance –∂–∞–∑—É—É–Ω—É —Ç“Ø–∑“Ø“Ø –∂–µ –∂–∞“£—ã–ª–æ–æ
        attendance, created = Attendance.objects.update_or_create(
            student=student,
            schedule=schedule,
            date=schedule_date,
            defaults={
                'status': status,
                'marked_by_student': True,
                'marked_at': datetime.now()
            }
        )
        
        return JsonResponse({
            'success': True,
            'status': status,
            'message': f'–ö–∞—Ç—ã—à—É—É "{status}" –¥–µ–ø –±–µ–ª–≥–∏–ª–µ–Ω–¥–∏',
            'created': created
        })
        
    except Exception as e:
        return JsonResponse({'error': f'Error marking attendance: {str(e)}'}, status=500)